/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package koureio;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static koureio.Koureio.Dstatement;
import static koureio.Koureio.rs;
import static koureio.User_Log.DPstatement;
import static koureio.User_Log.DdbConnection;
import static koureio.User_Log.DdriverClassName;

/**
 *
 * @author KARIOTIS STEFANOS
 */
public class Admin_Log extends javax.swing.JFrame {

   
    public Admin_Log() throws Exception {
        initComponents();
        setResizable(false);
        MyConnection();
        Refresh();
        Refresh1();
        UsersUpdate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Requests = new javax.swing.JTable();
        AdminLogOut = new javax.swing.JButton();
        DeleteRequest = new javax.swing.JButton();
        Insert = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        DeleteRequest1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Apointments = new javax.swing.JTable();
        AdminLogOut1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Users = new javax.swing.JTable();
        AdminLogOut2 = new javax.swing.JButton();
        DeleteRequest2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Requests.setBackground(new java.awt.Color(204, 204, 204));
        Requests.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        Requests.setForeground(new java.awt.Color(102, 0, 0));
        Requests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Hairdresser id", "Time", "Day"
            }
        ));
        jScrollPane1.setViewportView(Requests);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 308));

        AdminLogOut.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        AdminLogOut.setForeground(new java.awt.Color(102, 0, 0));
        AdminLogOut.setText("LOG OUT");
        AdminLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminLogOutActionPerformed(evt);
            }
        });
        jPanel1.add(AdminLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 140, 70));

        DeleteRequest.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        DeleteRequest.setForeground(new java.awt.Color(102, 0, 0));
        DeleteRequest.setText("DELETE");
        DeleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRequestActionPerformed(evt);
            }
        });
        jPanel1.add(DeleteRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 441, 150, 70));

        Insert.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        Insert.setForeground(new java.awt.Color(102, 0, 0));
        Insert.setText("INSERT");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });
        jPanel1.add(Insert, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 441, 140, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/koureio/images/UB_Image_05.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 600, 240));

        jTabbedPane1.addTab("REQUESTS", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DeleteRequest1.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        DeleteRequest1.setForeground(new java.awt.Color(102, 0, 0));
        DeleteRequest1.setText("DELETE");
        DeleteRequest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRequest1ActionPerformed(evt);
            }
        });
        jPanel2.add(DeleteRequest1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, 140, 70));

        Apointments.setBackground(new java.awt.Color(204, 204, 204));
        Apointments.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        Apointments.setForeground(new java.awt.Color(102, 0, 0));
        Apointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Hairdresser id", "Time", "Day"
            }
        ));
        jScrollPane2.setViewportView(Apointments);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 310));

        AdminLogOut1.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        AdminLogOut1.setForeground(new java.awt.Color(102, 0, 0));
        AdminLogOut1.setText("LOG OUT");
        AdminLogOut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminLogOut1ActionPerformed(evt);
            }
        });
        jPanel2.add(AdminLogOut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 140, 70));

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/koureio/images/UB_Image_05.jpg"))); // NOI18N
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 600, 240));

        jTabbedPane1.addTab("APOINTMENTS", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Users.setBackground(new java.awt.Color(204, 204, 204));
        Users.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        Users.setForeground(new java.awt.Color(102, 0, 0));
        Users.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Name", "Surname", "Phone", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Users);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 310));

        AdminLogOut2.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        AdminLogOut2.setForeground(new java.awt.Color(102, 0, 0));
        AdminLogOut2.setText("LOG OUT");
        AdminLogOut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminLogOut2ActionPerformed(evt);
            }
        });
        jPanel3.add(AdminLogOut2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 150, 70));

        DeleteRequest2.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        DeleteRequest2.setForeground(new java.awt.Color(102, 0, 0));
        DeleteRequest2.setText("DELETE");
        DeleteRequest2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRequest2ActionPerformed(evt);
            }
        });
        jPanel3.add(DeleteRequest2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 440, 140, 70));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/koureio/images/UB_Image_05.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 309, 600, 240));

        jTabbedPane1.addTab("USERS", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AdminLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminLogOutActionPerformed
        try {
            Koureio kour=new Koureio();
            kour.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Admin_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            DdbConnection.close();
        } catch (SQLException ex) {
            Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
        
    }//GEN-LAST:event_AdminLogOutActionPerformed

    private void DeleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRequestActionPerformed
        int count=0;
        String selected="";
        String  hid="";
        String  time="";
        String  day="";
        String UpdateString="Select username,hid,time,day from Request";
        DefaultTableModel model =(DefaultTableModel) Requests.getModel();
        try {
                    Dstatement    = DdbConnection.createStatement();
                    rs= Dstatement.executeQuery(UpdateString);
                    while(rs.next()){
                     String user= rs.getString("username"); 
                     if(user.equals(model.getValueAt(count, 0))){
                         selected=user;
                         hid=(String)model.getValueAt(count,1);
                         time=(String)model.getValueAt(count,2);
                         day=(String)model.getValueAt(count,3);
                     }
                     else count++;
                    }
                    Dstatement.close();
                    UpdateString="Delete from Request where username=?";
                    DPstatement = DdbConnection.prepareStatement(UpdateString);
                    DPstatement.setString(1,selected);
                    int n= DPstatement.executeUpdate(); 
                    if (Requests.getSelectedRow() != -1) {
                     model.removeRow(Requests.getSelectedRow());
                    }
                    
                }catch(SQLException ex){
         System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
                System.out.println("Message: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("ErrorCode: " + ex.getErrorCode());
                ex = ex.getNextException();
                System.out.println("");
            }
        }
        finally{
            try {
                Refresh();
                UpdateString="UPDATE Availability SET avail='yes' where hid=? and time=? and day=?";
                DPstatement = DdbConnection.prepareStatement(UpdateString);
                DPstatement.setString(1,hid);
                DPstatement.setString(2,time);
                DPstatement.setString(3,day);
                int n= DPstatement.executeUpdate();
                DPstatement.close();
            } catch (SQLException ex) {
                Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DeleteRequestActionPerformed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
       try{
        int count=0;
        String selected="";
        String  hid="";
        String  time="";
        String  day="";
        String UpdateString="Select username,hid,time,day from Request";
        DefaultTableModel model =(DefaultTableModel) Requests.getModel();
        try {
                    Dstatement    = DdbConnection.createStatement();
                    rs= Dstatement.executeQuery(UpdateString);
                    while(rs.next()){
                     String user= rs.getString("username"); 
                     if(user.equals(model.getValueAt(count, 0))){
                         selected=user;
                         hid=(String)model.getValueAt(count,1);
                         time=(String)model.getValueAt(count,2);
                         day=(String)model.getValueAt(count,3);
                     }
                     else count++;
                    }
                    Dstatement.close();
                    UpdateString="Delete from Request where username=?";
                    DPstatement = DdbConnection.prepareStatement(UpdateString);
                    DPstatement.setString(1,selected);
                    int n= DPstatement.executeUpdate(); 
                    if (Requests.getSelectedRow() != -1) {
                     model.removeRow(Requests.getSelectedRow());
                    }
                    
                }catch(SQLException ex){
         System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
                System.out.println("Message: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("ErrorCode: " + ex.getErrorCode());
                ex = ex.getNextException();
                System.out.println("");
            }
        }
        finally{
            try {
                UpdateString="Insert into Appointment(username,hid,time,day) VALUES(?,?,?,?)";
                DPstatement = DdbConnection.prepareStatement(UpdateString);
                DPstatement.setString(1,selected);
                DPstatement.setString(2,hid);
                DPstatement.setString(3,time);
                DPstatement.setString(4,day);
                int n= DPstatement.executeUpdate();
                DPstatement.close();
                Refresh();
                Refresh1();
            } catch (SQLException ex) {
                Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       }catch(Exception e){
           System.out.println(e);
       }  
    }//GEN-LAST:event_InsertActionPerformed

    private void DeleteRequest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRequest1ActionPerformed
        int count=0;
        String selected="";
        String  hid="";
        String  time="";
        String  day="";
        String UpdateString="Select username,hid,time,day from APPOINTMENT";
        DefaultTableModel model =(DefaultTableModel) Apointments.getModel();
        try {
                    Dstatement    = DdbConnection.createStatement();
                    rs= Dstatement.executeQuery(UpdateString);
                    while(rs.next()){
                     String user= rs.getString("username"); 
                     if(user.equals(model.getValueAt(count, 0))){
                         selected=user;
                         hid=(String)model.getValueAt(count,1);
                         time=(String)model.getValueAt(count,2);
                         day=(String)model.getValueAt(count,3);
                     }
                     else count++;
                    }
                    Dstatement.close();
                    UpdateString="Delete from APPOINTMENT where username=?";
                    DPstatement = DdbConnection.prepareStatement(UpdateString);
                    DPstatement.setString(1,selected);
                    int n= DPstatement.executeUpdate(); 
                    if (Apointments.getSelectedRow() != -1) {
                     model.removeRow(Apointments.getSelectedRow());
                    }
                    
                }catch(SQLException ex){
         System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
                System.out.println("Message: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("ErrorCode: " + ex.getErrorCode());
                ex = ex.getNextException();
                System.out.println("");
            }
        }
        finally{
            try {
                UpdateString="UPDATE Availability SET avail='yes' where hid=? and time=? and day=?";
                DPstatement = DdbConnection.prepareStatement(UpdateString);
                DPstatement.setString(1,hid);
                DPstatement.setString(2,time);
                DPstatement.setString(3,day);
                int n= DPstatement.executeUpdate();
                Refresh1();
                DPstatement.close();
            } catch (SQLException ex) {
                Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DeleteRequest1ActionPerformed

    private void AdminLogOut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminLogOut1ActionPerformed
        try {
            Koureio kour=new Koureio();
            kour.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Admin_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            DdbConnection.close();
        } catch (SQLException ex) {
            Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_AdminLogOut1ActionPerformed

    private void AdminLogOut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminLogOut2ActionPerformed
        try {
            Koureio kour=new Koureio();
            kour.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Admin_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            DdbConnection.close();
        } catch (SQLException ex) {
            Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_AdminLogOut2ActionPerformed

    private void DeleteRequest2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRequest2ActionPerformed

        String selected="";
        String UpdateString="Select username from USERS";
        DefaultTableModel model =(DefaultTableModel) Users.getModel();
        try {
                    Dstatement    = DdbConnection.createStatement();
                    rs= Dstatement.executeQuery(UpdateString);
                    while(rs.next()){
                     String user= rs.getString("username"); 
                     if(user.equals(model.getValueAt(Users.getSelectedRow(), 0))){
                         selected=user;
                     }
                    }
                    Dstatement.close();
                    UpdateString="Delete from USERS where username=?";
                    DPstatement = DdbConnection.prepareStatement(UpdateString);
                    DPstatement.setString(1,selected);
                    int n= DPstatement.executeUpdate(); 
                    if (Users.getSelectedRow() != -1) {
                     model.removeRow(Users.getSelectedRow());
                    }
                    
                }catch(SQLException ex){
         System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
                System.out.println("Message: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("ErrorCode: " + ex.getErrorCode());
                ex = ex.getNextException();
                System.out.println("");
            }
            fail();
        }
        finally{
            try {
                UsersUpdate();
                DPstatement.close();
            } catch (SQLException ex) {
                Logger.getLogger(User_Log.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
    }//GEN-LAST:event_DeleteRequest2ActionPerformed

       static String     Durl = "jdbc:derby://localhost:1527/Koureio" ;
       static Connection DdbConnection = null;
       static String     Dusername = "tejohny";
       static String     Dpasswd = "margoleta16";
       static Statement  Dstatement       = null;
       static PreparedStatement DPstatement =null; 
       static ResultSet rs=null;
       static String rusername="";
       static String rhid="";
       static String rtime="";
       static String rday="";
       
       
       
       
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Log.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Admin_Log().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Admin_Log.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    void MyConnection() throws Exception{
       try{ 
        Class.forName (DdriverClassName); 
       }catch(ClassNotFoundException ex){
       }
        System.out.println(Dusername + " "+ Dpasswd+" "+ Durl);
        DdbConnection = DriverManager.getConnection (Durl, Dusername, Dpasswd);
    }
    void Refresh(){
        String StringUpdate="Select username,hid,time,day from Request";
        DefaultTableModel model =(DefaultTableModel) Requests.getModel();
        model.setRowCount(0);
         try {
            Dstatement    = DdbConnection.createStatement(); 
            rs= Dstatement.executeQuery(StringUpdate);
            while(rs.next()){
                  String username= rs.getString("username");  
                  String hid= rs.getString("hid"); 
                  String time= rs.getString("time");
                  String day= rs.getString("day");
                  Object[] row ={username,hid,time,day};
                  model.addRow(row);
            }
            Dstatement.close();
         }catch(SQLException ex){
              System.out.println("\n -- SQL Exception --- \n");
	  while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		System.out.println("SQLState: " + ex.getSQLState());
		System.out.println("ErrorCode: " + ex.getErrorCode());
		ex = ex.getNextException();
		System.out.println("");
         }    
        }
    }
    void Refresh1(){
        String StringUpdate="Select username,hid,time,day from Appointment";
        DefaultTableModel model =(DefaultTableModel) Apointments.getModel();
        model.setRowCount(0);
         try {
            Dstatement    = DdbConnection.createStatement(); 
            rs= Dstatement.executeQuery(StringUpdate);
            while(rs.next()){
                  String username= rs.getString("username");  
                  String hid= rs.getString("hid"); 
                  String time= rs.getString("time");
                  String day= rs.getString("day");
                  Object[] row ={username,hid,time,day};
                  model.addRow(row);
            }
            Dstatement.close();
         }catch(SQLException ex){
              System.out.println("\n -- SQL Exception --- \n");
	  while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		System.out.println("SQLState: " + ex.getSQLState());
		System.out.println("ErrorCode: " + ex.getErrorCode());
		ex = ex.getNextException();
		System.out.println("");
         }    
        }
    }
    void UsersUpdate(){
        String StringUpdate="Select username,name,surname,phone,address from Users where type='Customer' ";
        DefaultTableModel model =(DefaultTableModel) Users.getModel();
        model.setRowCount(0);
         try {
            Dstatement    = DdbConnection.createStatement(); 
            rs= Dstatement.executeQuery(StringUpdate);
            while(rs.next()){
                  String username= rs.getString("username");  
                  String name= rs.getString("name"); 
                  String surname= rs.getString("surname");
                  String phone= rs.getString("phone");
                  String address= rs.getString("address");
                  Object[] row ={username,name,surname,phone,address};
                  model.addRow(row);
            }
            Dstatement.close();
         }catch(SQLException ex){
              System.out.println("\n -- SQL Exception --- \n");
	  while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		System.out.println("SQLState: " + ex.getSQLState());
		System.out.println("ErrorCode: " + ex.getErrorCode());
		ex = ex.getNextException();
		System.out.println("");
         }    
        } 
    }
    void fail(){
     JOptionPane.showMessageDialog(null,"This User cant be deleted","FAILURE",JOptionPane.INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdminLogOut;
    private javax.swing.JButton AdminLogOut1;
    private javax.swing.JButton AdminLogOut2;
    private javax.swing.JTable Apointments;
    private javax.swing.JButton DeleteRequest;
    private javax.swing.JButton DeleteRequest1;
    private javax.swing.JButton DeleteRequest2;
    private javax.swing.JButton Insert;
    private javax.swing.JTable Requests;
    private javax.swing.JTable Users;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}